# -*- coding: utf-8 -*-
"""Retrieval_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10RXv7nnZ_AqPZ41h3TzGDKaCEv-SqlZh
"""

!sudo wget -O /usr/sbin/gdrivedl 'https://f.mjh.nz/gdrivedl'
!sudo chmod +x /usr/sbin/gdrivedl

!gdrivedl "https://drive.google.com/file/d/1_5ITiJMIPNdANgGm34vLSMT4F8DF6NJM/view?usp=sharing"

!unzip "/content/Data.zip" -d "/content/Data"

import numpy as np
from numpy import asarray
import os
import tensorflow.keras
from tensorflow.keras.preprocessing import image
from keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.vgg16 import preprocess_input
import sys
from google.colab.patches import cv2_imshow
import cv2
from PIL import Image

def extract_feature(img_dir, based_model):
  img = image.load_img(img_dir, target_size=(224, 224))
  img_arr = image.img_to_array(img)
  img_arr = np.expand_dims(img_arr,axis=0)
  img_arr = preprocess_input(img_arr)
  feature = based_model.predict(img_arr)
  arr = asarray(feature.flatten())
  return arr

def Image_extraction(Path, based_model, extract_feature):
  imgs = os.listdir(Path)
  Extraction = []
  for i in imgs:
    if i != 'desktop.ini' and i != '.ipynb_checkpoints':
      img_path = os.path.join(Path,i)
      feature = extract_feature(img_path,based_model)
      Extraction.append([i,feature])
  return Extraction

#Retrieve ONE image
def System(data_path, Query_path, nb_img, Cal):
  based_model = VGG16(include_top=False)
  #Extract feature from data 100 image and Query
  Feature_Extraction = Image_extraction(data_path, based_model, extract_feature)
  Query = extract_feature(Query_path, based_model)
  #Calculate the distance
  Distance = []
  for i in range(len(Feature_Extraction)):
    Dis = Cal(Feature_Extraction[i][1], Query)
    Ele = [Dis,Feature_Extraction[i][0]]
    Distance.append(Ele)
  Q = cv2.imread(Query_path)
  cv2_imshow(Q)
  print('\n')
  print('\n')
  print('========================================IMAGE RETRIVAL============================================')
  print('\n')
  print('\n')
  Distance.sort(reverse=True)
  for k in range(int(nb_img)):
    img_query_path = os.path.join(data_path, str(Distance[k][1]))
    image = cv2.imread(img_query_path) 
    cv2_imshow(image)
    print('*************************************')
  cv2.waitKey()
  cv2.destroyAllWindows()

#Retrieve more than one image --> the results will be saved in file .txt
def System_Greater(data_path, Query_path, Cal):
  based_model = VGG16(include_top=False)
  #Extract feature from data 100 image and Query
  Feature_Extraction = Image_extraction(data_path, based_model, extract_feature)
  Query = Image_extraction(Query_path, based_model, extract_feature)
  file_name ='Result_Distance.txt'
  with open(file_name, 'w', encoding = 'utf-8') as f:
    f.write(str(Cal) + 'Distance\n')
    for j in range(len(os.listdir(Query_path))):
      Distance = []
      f.write('Query: ' + str(Query[j][0]) + '\n')
      for i in range(len(Feature_Extraction)):
        Dis = Cal(Feature_Extraction[i][1],Query[j][1])
        Ele = [Dis,Feature_Extraction[i][0]]
        Distance.append(Ele)
      print('Query: ' + str(Query[j][0]))
      Distance.sort(reverse=True)
      f.write(str(np.array(Distance)))
      f.write('\n')

def Cosine(x, y):
    return np.dot(x, y) / (np.sqrt(np.dot(x, x)) * np.sqrt(np.dot(y, y)))
def Scala(x,y):
  return np.dot(x, y)
def L1(x,y):
  return np.sum(np.abs(x-y))
def L2(x,y):
  return np.linalg.norm(x-y)

data_path = '/content/Data/100_Image'
Query_path = '/content/Data/Query/Coffee.jpg'
#System_Greater(data_path, Query_path, Cosine)
System(data_path, Query_path, 5, Cosine)